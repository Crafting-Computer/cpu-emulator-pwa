[package]
name = "cpu-emulator-pwa"
version = "0.1.0"
authors = ["Kevin Li <kevinli020508@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
serde_json = "1.0.32"
serde_derive = "1.0.80"
serde = "1.0.80"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.2"

[dependencies.wasm-bindgen]
version = "^0.2"
features = ["serde-serialize"]

[dependencies.web-sys]
version = "0.3"
features = ["console"]

[profile.release]
lto = true           # enable advanced / slower LLVM optimizations
opt-level = 'z'      # or `s` for size ; value `3` for speed
codegen-units = 1    # run in a single thread to perform single-thread optimizations

[package.metadata.wasm-pack.profile.release]
wasm-opt = ['-Os']   # config `wasm-opt` (the one of the `binaryen` tools integrated into `wasm-pack`)